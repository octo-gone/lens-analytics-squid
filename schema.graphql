type Profile @entity {
    id: ID!
    address: String! @index
    handle: String! @index
    imageUri: String!
    publications: [PublicationRef!] @derivedFrom(field: "creator")
    createdAt: DateTime! @index
    updatedAt: DateTime! @index
}

interface Publication @query {
    id: ID!
    ref: PublicationRef
}

type PublicationRef @entity {
    id: ID!
    creator: Profile! @index
    variant: PublicationVariant! @index
    post: Post @unique
    mirror: Mirror @unique
    comment: Comment @unique
    timestamp: DateTime! @index
}

enum PublicationVariant {
    POST, COMMENT, MIRROR
}

type Post implements Publication @entity {
    id: ID!
    ref: PublicationRef @derivedFrom(field: "post")
    contentUri: String!
    content: JSON
}

type Mirror implements Publication @entity {
    id: ID!
    ref: PublicationRef @derivedFrom(field: "mirror")
    mirroredCreator: Profile! @index
    mirroredPublication: PublicationRef! @index
}

type Comment implements Publication @entity {
    id: ID!
    ref: PublicationRef @derivedFrom(field: "comment")
    contentUri: String!
    content: JSON
    commentedCreator: Profile! @index
    commentedPublication: PublicationRef! @index
}

type Collect @entity {
    id: ID!
    collector: String! @index
    collectedCreator: Profile! @index
    collectedPublication: PublicationRef! @index
    collectedRootCreator: Profile! @index
    collectedRootPublication: PublicationRef! @index
    timestamp: DateTime! @index
}